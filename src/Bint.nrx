package com.rvjansen
import com.eaio.uuid.UUID
/**
 * Class Bint implements the Batch Interface for Knowledge Base Operations
 * Its naming is a tip of the hat to the previous Bint DSL
 * Created on: wo, 11, sep 2013 18:29:12 +0200
 */
class Bint
  
  properties inheritable
  client = KBClient
  -- for historical reasons, use these uuids
  -- new set can be generated by replacing these with newUUID()
  ob_uuid     = '8701860C-F92A-495B-A0BF-C76316DE647C'
  nm_uuid     = 'ADFD9D7F-A05F-4DB3-8B40-C7813D3900DC'
  abbr_uuid   = '1117CCE0-1A5D-11E3-8B81-0A0027000000'
  def_uuid    = '2120B840-1A5D-11E3-9BFD-0A0027000000'
  cl_uuid     = '9A2CD86A-FF9F-415C-9DED-1D86CB6710E9'
  scheme_uuid = 'E138A197-7645-4B90-A6EB-B9C61DBA08D1'
  domain_uuid = '400B08AB-786D-45D4-AFD7-34933CA6131F'
  descriptor  = '89184770-1A5C-11E3-9DFC-0A0027000000'
  scope_uuid  = 'A912E940-1AF7-11E3-96BD-0A0027000000'
  
  /**
   * Default constructor
   */
  method Bint()
    this.client = KBClient('') -- defaults to localhost

  /**
   * Method addScope adds a Scope Object to the repository
   * @param scopeName_ is a Rexx containing the name of the scope
   * @returns the UUID of the new Scope 
   */
  method addScope(scopeName_)
    -- scope object
    new_scope_uuid = newUUID()
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(new_scope_uuid)
    f.setObj(this.scope_uuid)
    f.assertz(this.client)
    
    -- scope object name
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(new_scope_uuid)
    f.setObj(scopeName_)
    f.assertz(this.client)

    return new_scope_uuid


  method addObject(objectType_,objectName_,scope_)
    
    -- add the object and its type

    -- add it to the scope
    
    -- add its primary name

  method addDescriptor(object_,descriptor_name,scope_)
    n = newUUID()

    -- add the descriptor object
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(n)
    f.setObj(this.descriptor)
    f.assertz(this.client)

    -- add the descriptor name
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(n)
    f.setObj(descriptor_name)
    f.assertz(this.client)

    -- add the descriptor to the object
    f = Fact()
    f.setPred(this.descriptor)
    f.setSubj(n)
    f.setObj(object_)
    f.assertz(this.client)
    
    -- add to scope
    f = Fact() -- scope includes descriptor
    f.setPred(this.scope_uuid)
    f.setSubj(scope_) -- scope
    f.setObj(n) -- descriptor
    f.assertz(this.client)

    return n


  /**
   * Method addScheme adds a scheme to a classification including domain values
   * @param ob is a Rexx representing the id of the object being classified
   * @param schemeName is a Rexx representing the name of the new scheme
   * @param domains is a Rexx array which contains the names of the domains of the scheme
   * @param scope is a Rexx 
   */
  method addScheme(ob,schemeName,domains,scope) signals java.rmi.RemoteException
    
    -- add a scheme object of type scheme
    new_scheme_uuid = newUUID() -- the uuid of the scheme instance 
    
    f = Fact() -- the scheme 
    f.setPred(this.ob_uuid)
    f.setSubj(new_scheme_uuid)
    f.setObj(this.scheme_uuid)
    f.assertz(this.client)
    
    f = Fact() -- add its primary name
    f.setPred(this.nm_uuid)
    f.setSubj(new_scheme_uuid)
    f.setObj(schemeName)
    f.assertz(this.client)
    
    f = Fact() -- add it to the scope -- scope includes scheme
    f.setPred(this.scope_uuid)
    f.setSubj(scope)
    f.setObj(new_scheme_uuid)
    f.assertz(this.client)
    
    -- add classification relationship scheme classifies object
    f = Fact()
    f.setPred(this.cl_uuid)
    f.setSubj(new_scheme_uuid) -- scheme
    f.setObj(ob) -- classifies object
    f.assertz(this.client)

    -- add the classification relationship object
    -- for if ever we need a relationship to it
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(new_scheme_uuid) -- instance
    f.setObj(this.cl_uuid) -- classification relationship type
    f.assertz(this.client)
    
    loop i over domains
      desc = domains[i]
      parse desc nm':'def
      this.addDomainToScheme(new_scheme_uuid,nm,def,scope)      
    end

  /**
   * Method addDomainToScheme adds a Domain value to a Scheme
   * @param domainName_ is a Rexx
   * @param domainName_ is a Rexx
   * @param scope_ is a Rexx
   */
  method addDomainToScheme(scheme_,domainName_,def_,scope_)  signals java.rmi.RemoteException
    n = newUUID()

    -- the object is type domain object
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(n)
    f.setObj(this.domain_uuid)
    f.assertz(this.client)    
    
    -- the domain is domain in scheme relationship
    f = Fact()
    f.setPred(this.domain_uuid)
    f.setSubj(n)
    f.setObj(scheme_)
    f.assertz(this.client)
    
    --its name
    f = Fact() -- add its primary name
    f.setPred(nm_uuid)
    f.setSubj(n)
    f.setObj(domainName_)
    f.assertz(this.client)

    --its abbreviated name
    f = Fact() -- add its primary name
    f.setPred(abbr_uuid)
    f.setSubj(n)
    f.setObj(Abbreviations.abbreviate(domainName_))
    f.assertz(this.client)

    --its definition
    f = Fact()
    f.setPred(def_uuid)
    f.setSubj(n)
    f.setObj(def_)
    f.assertz(this.client)

    -- add to scope
    f = Fact() -- scope includes domain
    f.setPred(this.scope_uuid)
    f.setSubj(scope_)
    f.setObj(n)
    f.assertz(this.client)
    
  /**
   * Method newUUID constructs a new UUID
   * @return String containing ...
   */
  method newUUID() returns String static
    return UUID().toString.toUpperCase

  