package com.rvjansen

/**
 * Class selectLanguages implements the bilingual lexica.
 * <BR>
 * Created on: ma, 14, okt 2013 15:31:06 +0200
 */
class selectLanguages
  properties private
  client = KBClient('')
  lista  = TreeMap()
  defMap = TreeMap()

  nofont = 0
  /**
   * Default constructor
   */
  method selectLanguages()
    say Date() 'selectLanguages started.'
    -- select papiamento and available glosses
    client = KBClient('')
    a = client.request('pap(X),nm(X,Y)')
    i = a.iterator()
    loop while i.hasNext()
      rs = Rexx i.next()
      lista.put(rs['Y'].translate('',"'").strip(),rs['X'])
    end
    say Date() a.size() 'Papiamento lemmata available'
    
    i = lista.keySet().iterator()
    loop while i.hasNext()
      rs = Rexx i.next()
      uid = lista.get(rs)
      a = client.request("lemmasynset("uid",Number),synsetnumber(Synset,Number),def(Synset,Definition).")
      j = a.iterator()
      defSet = TreeSet()
      loop while j.hasNext()
	def = Rexx j.next()
	defSet.add(def['Definition'])
      end
      defMap.put(uid,defSet)
    end
    
    -- loop over languages TODO loop over the domains of the scheme
    languages = 'cat cmn dan eng eus fas fin fra glg ind ita jpn nno nob pol por spa tha zsm'
    loop ii = 1 to languages.words()
      language = languages.word(ii)
      reversedMap = TreeMap()
      a = client.request("def(X,Y),nm(X,"language").")
      lf = Rexx a.get(0)
      language_fullname = lf['Y'].strip('b',"'")
      select
	when language_fullname.words() = 1 then language_fullname = language_fullname.upper(1,1)
	when language_fullname.words() = 2 then language_fullname = language_fullname.word(1).upper(1,1) language_fullname.word(2).upper(1,1)
	otherwise
	  nop
      end

      say Date() 'processing' language_fullname
      count = 0
      out = PrintWriter(BufferedWriter(FileWriter('../tex/book/pap-'language'.tex')))
      out.println('\\twocolumn')
      out.println('\\chapter{Papiamento-'language_fullname'}')
      out.println('\\small')
      select
	when language = 'tha' then out.println('\\raggedright')
	when language = 'fin' then out.println('\\raggedright')
	when language = 'zsm' then out.println('\\raggedright')
	otherwise
	  nop
      end
      i = lista.keySet().iterator()
      loop while i.hasNext()
	lemma = Rexx i.next()
	uid = lista.get(lemma)
	a = client.request("lemmasynset("uid",Number),synsetnumber(Synset,Number),lemmasynset(X,Number),"language"(X),nm(X,Translation).")
	-- only print when we found translations
	if a <> null, a.size()>0 then do
	  j = a.iterator()
	  rsSet = TreeSet()
	  loop while j.hasNext()
	    trans = Rexx j.next()
	    rsSet.add(trans['Translation'])
	    reversedMap.put(trans['Translation'],lemma)
	  end
	  if rsSet.size()>0 then
	    do
	      count = count + 1
	      out.print('\\fontspec{Minion Pro}')
	      out.print('\\textbf{'lemma'}')
	      -- parts of speech
	      if isTrue("noun("uid").") then out.print(' \\emph{n} ')
	      if isTrue("verb("uid").") then out.print(' \\emph{v} ')
	      if isTrue("adjective("uid").") then out.print(' \\emph{adj} ')
	      if isTrue("adverb("uid").") then out.print(' \\emph{adv} ')
	      if isTrue("interjection("uid").") then out.print(' \\emph{int} ')
	      
	      -- papiamento variants including government lists
	      if isTrue("cur_official("uid").") then out.print(' 'fs('\\fontspec{Lucida Sans Unicode}')'\u241d'fs('\\fontspec{Calibri-Italic}')'ϲ ')
	      else if isTrue("cur("uid").") then out.print( 'c'fs('\\fontspec{Calibri-Italic}')'ϲ')
	      if isTrue("aru_official("uid").") then out.print(' 'fs('\\fontspec{Lucida Sans Unicode}')'\u241d'fs('\\fontspec{Arial Narrow}')'α ')
	      else if isTrue("aru("uid").") then out.print(' 'fs('\\fontspec{Arial Narrow}')'α ')
	      selectFont(language,out)
	      out.println((Rexx rsSet.toString()).translate("    ","][#'").changestr('^','\\^{}').changestr('\\234\\','oe') '\\\\')
	    end
	end
      end -- loop while i
      out.close()
      say Date() count 'lemmata with translation for' language_fullname

      -- reverse processing starts here
     
      say Date() 'processing reverse list for' language_fullname
      count = 0
      out = PrintWriter(BufferedWriter(FileWriter('../tex/book/'language'-pap.tex')))
      out.println('\\twocolumn')
      out.println('\\chapter{'language_fullname'-Papiamento}')
      out.println('\\small')
      select
	when language = 'tha' then out.println('\\raggedright')
	when language = 'fin' then out.println('\\raggedright')
	when language = 'zsm' then out.println('\\raggedright')
	otherwise
	  nop
      end
      i = reversedMap.keySet().iterator()
      loop while i.hasNext()
	lemma = Rexx i.next()

	transl = Rexx reversedMap.get(lemma)
	
	count = count + 1
	selectFont(language,out)
	lemma = lemma.translate('',"'")
	out.print('\\textbf{'lemma.translate("    ","][#'").changestr('^','\\^{}').changestr('\\234\\','oe') '} ')
	-- parts of speech
	-- if isTrue("noun("uid").") then out.print(' \\emph{n} ')
	-- if isTrue("verb("uid").") then out.print(' \\emph{v} ')
	-- if isTrue("adjective("uid").") then out.print(' \\emph{adj} ')
	-- if isTrue("adverb("uid").") then out.print(' \\emph{adv} ')
	-- if isTrue("interjection("uid").") then out.print(' \\emph{int} ')
	
	-- -- papiamento variants including government lists
	-- if isTrue("cur_official("uid").") then out.print(' 'fs('\\fontspec{Lucida Sans Unicode}')'\u241d'fs('\\fontspec{Calibri-Italic}')'ϲ ')
	-- else if isTrue("cur("uid").") then out.print( 'c'fs('\\fontspec{Calibri-Italic}')'ϲ')
	-- if isTrue("aru_official("uid").") then out.print(' 'fs('\\fontspec{Lucida Sans Unicode}')'\u241d'fs('\\fontspec{Arial Narrow}')'α ')
	-- else if isTrue("aru("uid").") then out.print(' 'fs('\\fontspec{Arial Narrow}')'α ')
	out.print('\\fontspec{Minion Pro}')
	out.println(transl.translate("    ","][#'").changestr('^','\\^{}').changestr('\\234\\','oe')  '\\\\')
      end
      out.close()
      say Date() 'ended reversed lemmata for' language_fullname
      
    end
    say Date() 'selectLanguages ended.'

  method main(args=String[]) static
    selectLanguages()
    
  method fs(f)
    if this.nofont then return ''
    else return f

  method isTrue(req) returns boolean signals java.rmi.RemoteException
    a = client.request(req)
    if a = null then return 0
    if a.size() = 1 then return 1
    else return 0

  method selectFont(l,o=PrintWriter)
    select
      when l = 'cmn' then o.print('\\fontspec{Songti SC}')
      when l = 'fas' then o.print('\\fontspec{XB Zar}')
      when l = 'tha' then o.print('\\fontspec{Tahoma}')
      when l = 'jpn' then o.print('\\fontspec{PMingLiU}')
      otherwise
	o.print('\\fontspec{Minion Pro}')
    end