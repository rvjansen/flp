package com.rvjansen

class Abbreviations 
  properties private static
  -- elements are String[2] with two elements. First element is the
  -- full name, second element is the abbreviation.
  abbreviationsList  = ArrayList()
  
  /**
   * Default Constructor. Please note that before Abbreviations can
   * use the list of default abbreviations, they have to be set with
   * setAbbreviationsList. Normally, this initialization is done by
   * the BProcess constructor.
   */
  method Abbreviations()
    return this
    
  /**
   * Returns the row index of the searched string.
   * @param s String to return the row index for
   * @return row index (0 based) returns 0 when finding nothing.
   */ 
  method searchFor(s=String) returns int 

    loop i = 0 to this.abbreviationsList.size() -1
      abbrev = String[] this.abbreviationsList.get(i)
      if abbrev[0].toUpperCase().startsWith(s.toUpperCase()) then
	return i
    end -- loop i
    
    return 0 

  /**
   * Returns the row index of the searched string, or -1 if no entry
   * was found. It matches on the exact, case insensitive, string.
   * @param s String to search for.
   * @return row index of the matched string, or -1 if none was
   *         found.
   */
  method matchExact(s = String) returns int static
    loop i = 0 to abbreviationsList.size() -1
      abbrev = String[] abbreviationsList.get(i)
      if abbrev[0].toUpperCase().equals(s) then
	return i
    end

    return -1
    
  /**
   * Creates an abbreviation for the input string <code>s</code>.
   * The rules are taken from the "Governance and Maintenance" draft document
   * as of May 15 2003. <br>
   * <i>Note:</i><br>
   * In spite of what is stated in the Governance and Maintenance document,
   * no 18 character limit is used.
   * <p>
   * The global algorithm used is, for every word (space separated) in the
   * string, to first look into the list of known abbreviations. If
   * one doesn't exist, the rules from the document are applied.
   * <ol><li>Use Abbreviations from the list when available</li>
   *     <li>If a component name contains a data concept then the
   *         appropriate two letter abbreviation is to be used. (This is
   *         in fact handled by the previous rule)</li>
   *     <li>Abbreviations are constructed by remoing all vowels. Leading
   *         vowels are not deleted. (ACCRUAL -> ACCRL). The character
   *         'Y' is considered to be a vowel.</li>
   *     <li>Delete double consonants if the second consonant does not
   *         clearly identify the word. (ACCOUNTING -> ACRTN). This
   *         is a very subjective rule, so we apply it always.</li>
   *     <li>Words ending in "ING" should have the suffix abbreviated to "G"
   *         (<i>implementation note:</i> This should be done before removing
   *         vowels.)</li>
   *     <li>Words ending in "ED" should have the same abbreviations as the
   *         present tense form of the word with "D" added.
   *         (<i>Implementation note:</i> This is very hard to automate, so
   *         we suffice by removing the "E".</li>
   *     <li>All spaces, commas, parentheses, slashes and hyphens are
   *         replaced by underscores</li>
   *     <li>All quotes, apostrophes and leading digits are removed.</li>
   *     <li>Abbreviated Names must be in UPPER CASE</li>
   *     <li>Abbreviated Names must start with a character in the range
   *         [A..Z]</li>
   *     <li>Abbreviated Names cannot start with the string "XML"</li>
   *     <li>Abbrevations should not be deliniated with periods</li>
   * </ol>

   * @param s String to abbreviate
   * @return Abbreviation in upper case for string <code>s</code>.
   */
  method abbreviate(s = String) returns String static

    r = Rexx s
    r = r.upper()
    r = r.changestr('-', ' ')
    r = r.changestr('(', ' ')
    r = r.changestr(')', ' ')
    r = r.changestr(',', ' ')
    r = r.changestr(':', ' ')
    r = r.changestr(';', ' ')
    r = r.changestr('%', ' ')
    r = r.changestr('.', ' ')
    r = r.space()

    /* first try to match the whole string */
    row = matchExact(r.toString())
    if row > -1 then
      do
	abbrev = String[] abbreviationsList.get(row)
	/*  return abbreviationsArray[row, 1] */
	return abbrev[1]
      end -- if do
    
    retVal = Rexx ""
    /* then try to match as large a part of the string as possible */
    loop i = 1 to r.words
      row = -1
      loop j = r.words  to 1 by -1
	row = matchExact(r.subword(i,j))
	if row > -1 then
	  do -- found an exact match
	    abbrev = String[] abbreviationsList.get(row)
	    retVal = retVal abbrev[1]
	    -- update i to reflect the number of words matched
	    i = i + r.subword(i,j).words -1
	    leave
	  end -- if do
      end -- loop j
      
      if row > -1 then
	iterate -- we found an exact match
      else /* create our own abbreviation */
      do
	w = r.word(i)
	select
	  when w.right(3) = "ING" then
	    do
	      /* replace suffix "ING" with "G" */
	      w = w.left(w.length() -3)"G"
	    end
	  when w.right(2) = "ED" & w.length() > 2 then
	    do
	      /* replace suffix "ED" with "" */
	      w = w.left(w.length() -2)
	    end
	  otherwise
	    nop
	end
	/* remove all vowels, except leading ones */
	wright = w.right(w.length() -1)
	wright = wright.changestr('A', '')
	wright = wright.changestr('E', '')
	wright = wright.changestr('I', '')
	wright = wright.changestr('O', '')
	wright = wright.changestr('U', '')
	wright = wright.changestr('Y', '')

	w = w.left(1) || wright

	/* remove all illegal characters */
	w = w.changestr('"','')
	w = w.changestr("'",'')

	/* remove leading digits */
	if '0'.sequence('9').pos(w.left(1)) > 0 then
	  w = w.right(w.length() -1)

	/* replace forward and backward slashes by spaces */
	w = w.changestr('/', ' ')
	w = w.changestr("\\", ' ')

	/* 	  /\* strip delineating periods *\/ */
	/* 	  w = w.strip('B','.') */
	
	/* delete double consonants */
	/* first check to see if the first character is a consonant */
	if "AEIOU".pos(w.left(1)) > 0 then
	  start = 2
	else
	  start = 1

	tmp = w.left(start)
	
	firstCons = w.substr(start, 1)
	loop j = start +1 to w.length()
	  if w.substr(j, 1).equals(firstCons) then
	    iterate

	  tmp = tmp || w.substr(j, 1)
	  firstCons = w.substr(j, 1)
	  /* 	    if j+1 < w.length() then */
	  /* 	      firstCons = w.substr(j+1, 1) */
	end -- loop j
	retVal = retVal tmp

      end -- else do
    end -- loop i
    
    /* remove surplus spaces */
    retVal = retVal.space()
    /* changes all spaces to underscores */
    retVal = retVal.changestr(' ', '_')
    return retVal
    
  /**
   * Returns the value of the abbreviations array that is found at position
   * <code>i</code> and <code>j</code>.
   * @param i row number (zero based) of the object to return from the
   *        array.
   * @param j column number (zero based) of the object to return from
   *        the array. The first column is the whole word (or set of
   *        words) and the second column is the matching
   *        abbreviation.
   * @return object of type String with either the whole word (<code>j = 0
   *         </code>), or the matching abbreviation (<code>j = 1</code>).
   */
  method getValueAt(i=int, j=int) returns java.lang.Object
    retVal = String[] this.abbreviationsList.get(i)
    return retVal[j]

  /**
   * Sets the value of either the abbreviation or the abbreviated
   * term. If the requested row and of column cannot be found, it
   * fails silently, without any updates.
   * <p><b>Note:</b></p>
   * <p>This method only updates the internal cache of Abbreviations.
   * It does <em>not</em> update the data base.
   * @param val String that replaces the current value.
   * @param row int zero based index of the row
   * @param col 0 is the abbreviation, 1 is the term.
   * @return boolean indicating success. 
   * @see com.abnamro.midms.modelbase.editor.AbbreviationsTableModel
   */
  method setValueAt(val = String, row = int, col = int) returns boolean
    if row > this.abbreviationsList.size() | row < 0 | col > 1 | col < 0 then
      return 0

    if val = null then
      val = ""
    
    -- shall we disallow empty values? Perhaps only for the AAB BDWM
    -- terms.
    if col = 1 & val = "" then
      return 0

    r = String[] this.abbreviationsList.get(row)
    r[col] = val
    return 1
    
  /**
   * @return the length of the abbreviations array
   */
  method size() returns int 
    return this.abbreviationsList.size() 

  method setAbbreviationsList(al = ArrayList)
    this.abbreviationsList = al
    return

  method getAbbreviationsList() returns ArrayList
    return this.abbreviationsList  
