package com.rvjansen
import java.rmi.
import com.eaio.uuid.UUID
/**
 * Class KBClient implements the (most of the times local) Client code
 * of the KBServer Knowledge Base Server. 
 */
class KBClient implements KBServerInterface

  properties private
  KBServer = KBServerInterface
  
  properties constant
  serialVersionUID = long 99192042373734
  Y = String("Y")
  X = String("X")
  Z = String("Z")

  /**
   * Method KBClient is a constructor that takes an IP address or URL
   * @param loc_ is a Rexx
   */
  method KBClient(loc_)
    this.connect(loc_)

  /**
   * Default constructor connects to the local KBServer
   */
  method KBClient()
    this.connect("localhost")
    
  /**
   * Method connect connects over RMI to the KBServer
   * of which the location is specified in the parameter 
   * @param loc_ is a Rexx
   */
  method connect(loc_)
    /* if the IP address is not specified, set it to localhost */
    do
      addr = Rexx InetAddress.getLocalHost().toString()
      addr = addr.substr(addr.pos('/')+1)      
    catch java.net.UnknownHostException
    end
    serverAdr = addr
    if loc_ = 'localhost' then serverAdr = addr
    else serverAdr = loc_
    serverAdr = serverAdr":1199"
    urlstring = 'rmi://'serverAdr'/KBServer'
    /* then connect to the KBServer or catch the exception(s) */
    do
      this.KBServer = KBServerInterface Naming.lookup(urlstring)   -- server object
      
    catch e1=java.net.MalformedURLException
      say 'The URL is not valid:' urlstring
      say 'MalformedURLException caught: \n' e1.getMessage()
    catch RemoteException
      say "Server not found."
      exit
    catch e4=Exception
      say 'Exception (' e4 ') caught: \n' e4.getMessage()
      say e4.getMessage()
    end
    return
    
  /**
   * Method request fires off the request to the Knowledge Base Server
   * It returns an ArrayList that can be emtpy, or filled with
   * indexed strings that have key and value as returned by the prolog request  
   */
  method request(s=KBRequest) signals RemoteException returns KBResponse
    return this.KBServer.request(s)

  /**
   * convenience method to enable firing off a request from a Rexx textline
   * @param s is a Rexx that needs to be valid prolog 
   */  
  method request(s) returns ArrayList signals RemoteException
    r = KBRequest(s)
    response = this.request(r)
    if response.isResult = 0 then return null
    return response.getResponse

  /**
   * convenience method to enable firing off a request from a Rexx textline
   * @param s is a Rexx that needs to be valid prolog 
   */  
  method query(s) returns ArrayList signals RemoteException
    r = KBRequest(s)
    response = this.request(r)
    if response.isResult = 0 then return null
    return response.getResponse

  -- method isCurrent(s=KBRequest) signals RemoteException returns boolean
  --   return this.KBServer.isCurrent(s)
	
  -- method checkPoint(s) signals RemoteException, IOException
  --   this.KBServer.checkPoint(s)
    
  -- method checkPoint() signals RemoteException, IOException
  --   this.checkPoint(newUUID())


    -- method obviate(s=KBRequest) signals RemoteException returns boolean
    --   return this.KBServer.obviate(s)
    
  /**
   * Method getSchemesForTaxon looks which schemes classify a concept
   * by checking all partitioning relationships to it 
   * @param id is a Rexx that contains a valid quoted uuid
   * @return ArrayList containing Rexx 
   */
  method getSchemesForTaxon(id) returns ArrayList
    id = checkID(id)
    l = ArrayList()
    a = this.request("cl(X,"id").")
    i = a.iterator()
    loop while i.hasNext()
      row = Rexx i.next()
      loop key over row
	l.add(row[key])
      end
    end
    return l

  /**
   * Method getDomainsForScheme lists all domains for a scheme
   * (not ordered yet)
   * @param id is a Rexx
   * @return ArrayList containing indexed strings that have keys and values
   */
  method getDomainsForScheme(id) returns ArrayList
    id = checkID(id)
    l = ArrayList()
    a = this.request("domain(X,"id").")
    i = a.iterator()
    loop while i.hasNext()
      row = Rexx i.next()
      loop key over row
	l.add(row[key])
      end
    end
    return l

  /**
   * Method getNameForID returns the current name associated with a uuid
   * @param id is a Rexx
   */
  method getNameForID(id)
    id = checkID(id)
    a = this.request("nm("id",Y).")
    if a = null then return ''
    if a.size() = 0 then say java.util.Date() 'KBClient: no current Name for:' id
    if a.size() > 1 then say java.util.Date() 'KBClient: more then one current Name for:' id
    val = Rexx a.get(0)
    return val['Y'].translate('',"'").strip()

  /**
   * Method getIDForName returns the current id associated with a name
   * @param id is a Rexx
   */
  method getIDForName(name_) signals RemoteException
    name_ = checkID(name_)
    a = this.request("nm(X,"name_").")
    if a = null then return ''
    if a.size() = 0 then do
      say java.util.Date() 'KBClient: no current ID for:' name_
      return ''
    end
    if a.size() > 1 then say java.util.Date() 'KBClient: more then one current ID for:' name_
    val = Rexx a.get(0) -- there should be one current name for an object id
    return val['X'].translate('',"'").strip()
    
  /**
   * Method getDescriptorsForID returns the set of descriptor relationships
   * to an object, as in the DESC/SCHEME dichotomy 
   * @param id is a Rexx
   */
  method getDescriptorsForID(id) returns ArrayList
    id = checkID(id)
    l = ArrayList()
    a = this.request("desc(X,"id").")
    if a = null then return l
    i = a.iterator()
    loop while i.hasNext()
      val = Rexx i.next()
      l.add(val['X'])
    end
    return l

  method getIDDomainsForSchemeName(s) returns TreeMap
    s = checkID(s)
    t = TreeMap()
    a = this.request("domain(X,Y),nm(Y,'"s"'),nm(X,Z).")
    if a = null then return t
    i = a.iterator()
    loop while i.hasNext()
      val = Rexx i.next()
      t.put(val['X'],val['Z'])
    end
    return t

  method getNameDomainsForSchemeName(s) returns TreeMap
    t = TreeMap()
    a = this.request("domain(X,Y),nm(Y,'"s"'),nm(X,Z).")
    if a = null then return t
    i = a.iterator()
    loop while i.hasNext()
      val = Rexx i.next()
      t.put(val['Z'],val['X'])
    end
    return t

  method getShortNameDomainsForSchemeName(s) returns TreeMap
    t = TreeMap()
    a = this.request("domain(X,Y),abbr(Y,'"s"'),abbr(X,Z).")
    if a = null then return t
    i = a.iterator()
    loop while i.hasNext()
      val = Rexx i.next()
      t.put(val['Z'],val['X'])
    end
    return t

  method checkID(id)
    if id.left(1) <> "'" then id = "'"id"'"
    return id

  method newUUID() returns String static
    return UUID().toString.toUpperCase
    
  method isTrue(req) returns boolean signals RemoteException
    return KBServer.isTrue(req)