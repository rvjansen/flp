package com.rvjansen
/**
 * Class readErkaneEngPap implements... 
 * <BR>
 * Created on: ma, 23, sep 2013 19:10:54 +0200
 */
class readErkaneEngPap extends Bint
  properties private
  
  /**
   * Default constructor
   */
  method readErkaneEngPap()
    in = BufferedReader(FileReader('../files/sources/erengpap.txt'))
    --start position
    eng_word = ''
    loop until eng_word = 'draw' 
      line = Rexx in.readLine()
      if line = null then leave
      parse line eng_word':'rest
    end
    
    loop forever
      line = Rexx in.readLine()
      if line = null then leave
      parse line eng_word':'rest

      -- check if exists in english wordnet
      --say '>>>>'
      lemma_uuid = checkRepositoryForLanguage(eng_word,'eng')
      if lemma_uuid = '' then
	do
	  --	  say eng_word 'is not in repository as English'
	  lemma_uuid = checkRepository(eng_word)
	  if lemma_uuid = '' then nop
	  else
	    nop--say eng_word lemma_uuid 
	end -- if do

      -- find gloss/synset relationships for these uuids
      synsets = ''
      loop ii = 1 to lemma_uuid.words()
	j = this.client.request("lemmasynset("lemma_uuid.word(ii)",Y)").iterator()
	loop while j.hasNext()
	  synset = Rexx j.next()
	  synsets = synsets synset['Y']
	end
      end
      
      say eng_word

      --say 'synsets: ' synsets
      

      papSet = TreeSet()
      -- split out papiamento words; for word, do
      if rest.pos('|') > 0 then do
      	loop while rest <> ''
	  parse rest w '|' rest 
      	  loop wi=1 to w.words()
	    papSet.add(w.word(wi).translate('',',').strip())
	  end
      	end
      end
      else do
	loop wi=1 to rest.words()
	  papSet.add(rest.word(wi).translate('',',').strip())
	end
      end
      i = papSet.iterator()
      loop while i.hasNext()
	papWord_ = Rexx i.next()
	if '1.2.3.4.5.6.7.8.9.'.pos(papWord_) >0 then iterate
	paplemma_uuid = checkRepositoryForLanguage(papWord_,'pap')
	--	say papWord_ paplemma_uuid
	if paplemma_uuid <> '' then do
	  loop iii=1 to synsets.words()
	    defiter=this.client.request("synsetnumber(Synset,"synsets.word(iii)"),def(Synset,Definition).").iterator()
	    loop while defiter.hasNext()
	      txt = Rexx defiter.next()
	      def = txt['Definition']
	      say papWord_ def '?'
	      addit=ask
	      if addit = 'y' then do -- add to repository
		say synsets.word(iii)
		say paplemma_uuid
		-- for every uuid lemma do
		loop paplemmata = 1 to paplemma_uuid.words()
		  current_pap_uuid = paplemma_uuid.word(paplemmata)
		  /* add synset number to lemma uuid */
		  f = Fact() -- its synset
		  f.setPred('3B365C30-22FF-11E3-80E8-E0F847277696')
		  f.setSubj(current_pap_uuid)
		  f.setObj(synsets.word(iii))
		  f.assertz(this.client)
		end
	      end
	    end
	  end
	end
      end
      
      
      -- flag as cur
      -- add source system relationship


      --say'<<<<'
      say
      
    end
    return
    
  method checkRepositoryForLanguage(word_,lang_) signals java.rmi.RemoteException
    word_ = word_.translate("\u2019","'")
    lemma_uuid = ''
    a = this.client.request("nm(X,'"word_"'),"lang_"(X)")
    i = a.iterator()
    loop while i.hasNext()
      r = Rexx i.next()
      lemma_uuid = lemma_uuid r['X']
    end
    return lemma_uuid

  method checkRepository(word_) signals java.rmi.RemoteException
    word_ = word_.translate("\u2019","'")
    lemma_uuid = ''
    a = this.client.request("nm(X,'"word_"')")
    i = a.iterator()
    loop while i.hasNext()
      r = Rexx i.next()
      lemma_uuid = lemma_uuid r['X']
    end
    return lemma_uuid

  method main(args=String[]) static
    readErkaneEngPap()