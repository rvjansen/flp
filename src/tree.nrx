package com.rvjansen
import java.rmi.
--trace results
class tree
  /**
   * Prints the Tree starting from an arbitrary top level taxon
   * what is the strategy: start with X (Taxon ('8701860C-F92A-495B-A0BF-C76316DE647C'))
   * see what Y classifies X
   * for every Y : list its domains (none if it is no scheme)
   * see what classifies Y
   * recurse until model data exhausted.
   */  
  properties private
  client = KBClient
  level  = 1
  
  /**
   * Method treeTest is the constructor
   * @param id is a Rexx that indicates the top of the tree
   */
  method tree(id)
    this.client = KBClient('') -- defaults to localhost
    this.recurseThroughModel(id)    

  /**
   * Method recurseThroughModel recurses through the model data
   * @param id is a Rexx that contains the uuid of the taxon to be processed
   */
  method recurseThroughModel(id) signals RemoteException
    say '--'.copies(this.level) id "Object" client.getNameForID(id)
    b = client.getDescriptorsForID(id)
    j = b.iterator()
    loop while j.hasNext()
      idd = Rexx j.next()
      say '--'.copies(this.level) idd 'is described by' client.getNameForID(idd)
    end
    a = client.getSchemesForTaxon(id)
    i = a.iterator()
    loop while i.hasNext()
      id = Rexx i.next()
      say '--'.copies(this.level) id 'is classified by' client.getNameForID(id)
      b = client.getDomainsForScheme(id)
      j = b.iterator()
      loop while j.hasNext()
	id = Rexx j.next()
	--	say id "Domain" client.getNameForID(id)
	this.level = this.level+2
	recurseThroughModel(id)
	this.level = this.level-2
      end
    end -- loop while i
    
  method main(args=String[]) static
    tree("8701860C-F92A-495B-A0BF-C76316DE647C") -- taxon
