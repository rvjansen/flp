package com.rvjansen
/**
 * Class StarterSet writes the metamodel starterset to a file
 * <BR>
 * Created on: di, 10, sep 2013 14:00:10 +0200
 */
class StarterSet extends Bint

  /**
   * Default constructor
   */
  method StarterSet()

    -- we write a related code file and add object to the online repository
    code = PrintWriter(BufferedWriter(FileWriter('code.prolog')))

    -- the top of the ontology
    -- 'object object is of type object'
    code.println('% ob/2 finds everything that is an object, regardless (not constrained to) of type')
    code.println('% it returns the Object UUID and the Object Type UUID')
    code.println('ob(X,Y) :-')
    code.println("\t'"this.ob_uuid"'(X,Y).")
    code.println('')

    -- add 'object'
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(this.ob_uuid)
    f.setObj(this.ob_uuid)
    f.assertz(this.client)

    -- add descriptor relationships
    -- primary name
    f = Fact()
    f.setPred(this.descriptor)
    f.setSubj(this.nm_uuid)
    f.setObj(this.ob_uuid)
    f.assertz(this.client)

    -- primary english name of primary name
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(this.nm_uuid)
    f.setObj('primary name')
    f.assertz(this.client)

    -- primary english name of object instance
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(this.ob_uuid)
    f.setObj('Object')
    f.assertz(this.client)

    -- abbr
    f = Fact()
    f.setPred(this.descriptor)
    f.setSubj(this.abbr_uuid)
    f.setObj(this.ob_uuid)
    f.assertz(this.client)

    -- primary english name of abbr
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(this.abbr_uuid)
    f.setObj('abbreviated name')
    f.assertz(this.client)

    -- english def
    f = Fact()
    f.setPred(this.descriptor)
    f.setSubj(this.def_uuid)
    f.setObj(this.ob_uuid)
    f.assertz(this.client)

    -- primary english name of def
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(this.def_uuid)
    f.setObj('definition')
    f.assertz(this.client)

    -- generate prolog shortcut
    code.println('nm(X,Y) :-')
    code.println("\t'"this.nm_uuid"'(X,Y).")
    
    -- generate prolog shortcut
    code.println('abbr(X,Y) :-')
    code.println("\t'"this.abbr_uuid"'(X,Y).")

    -- generate prolog shortcut
    code.println('def(X,Y) :-')
    code.println("\t'"this.def_uuid"'(X,Y).")

    -- generate prolog shortcut
    code.println('%descriptor describes object')
    code.println('desc(X,Y) :-')
    code.println("\t'"this.descriptor"'(X,Y).")

    -- add 'scheme'
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(this.scheme_uuid)
    f.setObj(this.scheme_uuid)
    f.assertz(this.client)

    -- add name of scheme scheme
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(this.scheme_uuid)
    f.setObj('Scheme')
    f.assertz(this.client)
    

    -- the prolog code for the cl predicate
    code.println('% classifies: classifier classified')
    code.println('% classification classifies object')
    code.println('cl(X,Y) :-')
    code.println("\t'"this.cl_uuid"'(X,Y).")
    code.println('')

    -- the prolog code for the scheme predicate
    code.println('% classification classifies object')
    code.println('scheme(X) :-')
    code.println("\tob(X,'"this.scheme_uuid"').")
    code.println('')

    -- the prolog code for the domain predicate
    code.println('% domain/2 is used to find the domains of a scheme -> domain(X,UUID)')
    code.println('% also, finds the scheme of a domain -> domain(UUID,Y)')
    code.println('domain(X,Z) :-')
    code.println("\tscheme(Z),'"this.domain_uuid"'(X,Z).")
    code.println('')

    -- the prolog code for the supertype predicate
    code.println('% supertp/3 finds the super type(s) of a concept. it does this by')
    code.println('% finding the subject type(s) of the partitioning relationship type(s)')
    code.println('supertp(X,Y,Z) :-')
    code.println('\tdomain(X,Y),cl(Y,Z).')
    code.println('')
    
    -- the prolog code for the attributes (attrs) predicate
    code.println('% attrs/4 is a shortcut to get to the local classification relationships/attributes of a type')
    code.println('% (the type needs to go in X)')
    code.println('attrs(N,X,Y,Z) :-')
    code.println('\tnm(X,N),cl(Y,X),nm(Y,Z).')
    
    -- scheme primary object type
    domains = ''
    domains[1] = 'Involved Party:A party involved in a process'
    domains[2] = 'Classification:The reduction of a range to known items'
    domains[3] = 'Resource Item:A general resource used in a process'
    domains[4] = 'Location:A specific place in space'
    domains[5] = 'Event:A specific point in time'
    domains[6] = 'Arrangement:A contract executed between involved parties'
    domains[7] = 'Condition:A condition to an Arrangement'

    -- scope contains object relationship
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(this.scope_uuid)
    f.setObj(this.scope_uuid)
    f.assertz(this.client)

    -- name of scope contains object relationship
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(this.scope_uuid)
    f.setObj('Scope contains Object')
    f.assertz(this.client)

    -- metadata scope object
    metadata_scope = newUUID()
    f = Fact()
    f.setPred(this.ob_uuid)
    f.setSubj(metadata_scope)
    f.setObj(this.scope_uuid)
    f.assertz(this.client)
    
    -- metadata scope object name
    f = Fact()
    f.setPred(this.nm_uuid)
    f.setSubj(metadata_scope)
    f.setObj('Metamodel Scope')
    f.assertz(this.client)
    
    addScheme(this.ob_uuid,'Primary Ontology Type',domains,metadata_scope)
    code.close()

    -- add scheme source system
    domains = ''
    domains[1] = 'metamodel:The model of the model'
    domains[2] = '(multi-) wordnet:The semantically interlinked dictionary from Princeton'
    addScheme(this.ob_uuid,'Source System',domains,metadata_scope)

    -- add scheme source file
    domains = ''
    domains[1] = 'metamodel - starterset'

    addScheme(this.ob_uuid,'Source System',domains,metadata_scope)
    
    -- this.client.checkpoint()
    
    
  method main(args=String[]) static
    StarterSet()
