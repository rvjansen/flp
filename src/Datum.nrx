package com.rvjansen
import java.text.
import java.util.
  /**
   * * Implements a lot of useful functions and methods on dates.
   * * Especially those that deal with timestamps.
   * * 20061110: after ten years, split it in static and instance functionality
   * * to make it of more use when re-using for non-current dates
   * * 20111011: after another 4 years, make sure the static functions are called statically 
   * */
class Datum

  properties indirect
  today	= Date
  cal	= Calendar

  /**
   *   * Default constructor, initializes with the current date.
   *   */
  method Datum()
    today = Date()
    cal	  = GregorianCalendar()
    cal.setTime(today)

  /**
   *   * Uses java.text.DateFormat.parse to parse the parameter into a
   *   * date.
   *   */
  method Datum(string=Rexx)
    --  setLenient(0)
    df	  = SimpleDateFormat("dd/MM/yy")
    today = df.parse(string)
    cal	  = GregorianCalendar()
    cal.setTime(today)

  /**
   *   * Uses java.text.DateFormat.parse to parse the parameter into a
   *   * date.
   *   */
  method Datum(s=String)
    df	  = SimpleDateFormat("dd/MM/yy")
    today = df.parse(s)
    cal	  = GregorianCalendar()
    cal.setTime(today)
    return this

  method Datum(d=Date)
    today = d
    cal	  = GregorianCalendar()
    cal.setTime(today)

  method clearTime()
    this.cal.set(CALENDAR.HOUR, 0)
    this.cal.set(CALENDAR.MINUTE, 0)
    this.cal.set(CALENDAR.SECOND, 0)

  method equals(x=Datum) returns boolean
    return this.getDateLocal() = x.getDateLocal()

  method before(x=Datum) returns boolean
    return cal.before(x.cal)

  method after(x=Datum) returns boolean
    return cal.after(x.cal)

  method getTimestamp() static
    df = SimpleDateFormat("yyyyMMddHHmmssSS")
    longdate = Rexx df.format(Date())
    return longdate

  method getDateStamp() static
    df = SimpleDateFormat("yyyyMMdd")
    longdate = Rexx df.format(Date())
    return longdate

  method getInstanceDateStamp()
    df = SimpleDateFormat("yyyyMMdd")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getTime()
    df = SimpleDateFormat("HHmmssSS")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getTimeZoneLongID() static
    cl = GregorianCalendar()
    return cl.getTimeZone().getID().toString()

  method getTimeZoneShortID() static
    cl = GregorianCalendar()
    return cl.getTimeZone().getDisplayName(0,SimpleTimeZone.SHORT).toString()

  method getLogTimestamp() static
    df = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
    longdate = Rexx df.format(Date())
    return longdate

  method getISODate()
    df = SimpleDateFormat("yyyy-MM-dd")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getUTCLogTimestamp() static
    df = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
    df.setTimeZone(SimpleTimeZone(0,"UTC"))
    longdate = Rexx df.format(Date())
    return longdate

  method getDisplayTimestamp() static
    df = SimpleDateFormat("EE dd-MMM-yyyy HH:mm:ss")
    longdate = Rexx df.format(Date())
    return longdate

  /**
   *   * Method getRtfTimestamp ...
   *   */
  method getRtfTimestamp() static
    df  = SimpleDateFormat("yyyy MM dd HH mm ss")
    tmp = Rexx df.format(Date())
    parse tmp year   " " tmp
    parse tmp month  " " tmp
    parse tmp day    " " tmp
    parse tmp hour   " " tmp
    parse tmp minute " " second
    return "\\yr"year"\\mo"month"\\dy"day"\\hr"hour"\\min"minute"\\sec"second

  /**
   *   * Method getLogTimestamp ...
   *   * @param dt is a Date
   *   */
  method getLogTimestamp(dt = Date) static
    df = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
    longdate = Rexx df.format(dt)
    return longdate

  method getFileBackupTimestamp() static
    df = SimpleDateFormat("dd-MM-yyyy-HHmm")
    longdate = Rexx df.format(Date())
    return longdate

  /**
   *   * this method formats the timestamp in a way suitable for the DBMS
   *   * Timestamp format. Be very careful not to use this when now() or
   *   * CURRENT TIMESTAMP is appropriate, because you can be bitten by
   *   * client/server clock skew.
   *     */
  method getDBMSTimestamp() static
    df = SimpleDateFormat("yyyy-MM-dd-HH.mm.ss.SSS")
    longdate = Rexx df.format(Date())
    return longdate

  method getDayOfWeekInMonth()
    df = SimpleDateFormat("EEEE F 'in' MMMM", Locale.US)
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getDayOfWeekInThreeChars()
    df = SimpleDateFormat("EE",Locale.US)
    longdate = Rexx df.format(this.cal.getTime())
    return longdate.upper

  method getDayOfWeekLocal()
    df = SimpleDateFormat("EEEE")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getDayOfWeekInMonthLocal()
    df = SimpleDateFormat("F")
    n = Rexx df.format(this.cal.getTime())
    select
      when n = '1' then n = "eerste"
      when n = '2' then n = "tweede"
      when n = '3' then n = "derde"
      when n = '4' then n = "vierde"
      when n = '5' then n = "vijfde" -- does this happen?
    end -- select
    df = SimpleDateFormat("'de" n "'EEEE 'in' MMMM")
    longdate = Rexx df.format(this.cal.getTime())

    return longdate

  method getDateLocal()
    df = SimpleDateFormat("dd-MM-yyyy")
    longdate = Rexx df.format(today)
    return longdate

  method getDateLocalWithSlashesAndStarsInYearNotY2KCompatible()
    df = SimpleDateFormat("dd/MM/")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate||"**"

  method getDateLocalWithSlashes()
    df = SimpleDateFormat("dd/MM/yy")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getDateLocalWithSlashesAndFourDigitYear()
    df = SimpleDateFormat("dd/MM/yyyy")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getMonthLocal()
    df = SimpleDateFormat("MMMM")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getYear()
    df = SimpleDateFormat("yyyy")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getJulianDate()
    df = SimpleDateFormat("yyD")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getJulianDateForDate(d=date)
    df = SimpleDateFormat("yyD")
    longdate = Rexx df.format(d)
    return longdate

  method getJulianDateWithDot()
    df = SimpleDateFormat("yy'.'D")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getNextDay()
    cal.add(Calendar.DATE, 1 )
    df = SimpleDateFormat("dd-MM-yyyy")
    longdate = Rexx df.format(cal.getTime())
    return longdate

  method getNextDayWithSlashes()
    cal.add(Calendar.DATE, 1 )
    df = SimpleDateFormat("dd/MM/yyyy")
    longdate = Rexx df.format(cal.getTime())
    return longdate

  method getNextDate() returns Date
    cal.add(Calendar.DATE, +1 )
    return cal.getTime()

  /**
   *   * Method getPreviousDate ...
   *   * @param numberOfDays is a int
   *   * @return Date containing ...
   *   */
  method getPreviousDate(numberOfDays = int) returns Date
    cal.add(Calendar.DATE, -numberOfDays )
    return cal.getTime()

  /**
   *   * Method getPreviousDate ...
   *   * @return Date containing ...
   *   */
  method getPreviousDate() returns Date
    return this.getPreviousDate(1)

  method getPreviousDay()
    cal.add(Calendar.DATE, -1 )
    df = SimpleDateFormat("dd-MM-yyyy")
    longdate = Rexx df.format(cal.getTime())
    return longdate

  method getPreviousDayInNetview6000LogFormat()
    cal.add(Calendar.DATE, -1 )
    df = SimpleDateFormat("EE MMM dd", Locale.US)
    longdate = Rexx df.format(cal.getTime())
    return longdate

  method getPreviousDayInApacheLogFormat()
    cal.add(Calendar.DATE, -1 )
    df = SimpleDateFormat("dd/MMM/yyyy", Locale.US)
    longdate = Rexx df.format(cal.getTime())
    return longdate

  method getPreviousDayInTouchFormat()
    cal.add(Calendar.DATE, -1 )
    df = SimpleDateFormat("yyyyMMdd0000", Locale.US)
    longdate = Rexx df.format(cal.getTime())
    return longdate

  method getTimeLong() returns long
    return today.getTime

  method isWeekend() returns Rexx
    df = SimpleDateFormat("EE", Locale.US)
    longdate = Rexx df.format(cal.getTime())
    if longdate = "Sat" | longdate = "Sun" then return "Y"
    else return "N"

  method getWeekNumber() returns Rexx
    df = SimpleDateFormat("w")
    longdate = Rexx df.format(this.cal.getTime())
    return longdate

  method getWeekNumberForDate(d=Date) returns Rexx
    -- @rjw@
    df = SimpleDateFormat("w")
    longdate = Rexx df.format(d)
    return longdate

  method getLastDayofMonth() returns Rexx
    return cal.getActualMaximum(Calendar.DAY_OF_MONTH)

  method setLenient(i=boolean)
    cal.setLenient(i)

  /**
   *   * Takes a time in milliseconds and returns it in a more readable
   *   * form.
   *   * @param tDelta time in milliseconds, like the return value from
   *   *        System.currentTimeMillis()
   *   */
  method getDisplayTime(tDelta = long) returns String static
    tSeconds   = tDelta / 1000
    tMinutes   = tSeconds % 60
    tHours     = tMinutes % 60
    tDays      = tHours   % 24
    tSeconds   = tSeconds - tMinutes * 60
    tMinutes   = tMinutes - tHours   * 60
    tHours     = tHours   - tDays    * 24
    ReturnText = ""

    if (tSeconds >= 1) | (tSeconds > 0 & (tMinutes > 0 | tHours > 0))  then
      do
	ReturnText = ReturnText (Rexx tSeconds).format(null,2) "second"
	if tSeconds > 1 then
	  ReturnText = ReturnText || "s"
      end
    if tMinutes > 0 then
      do
	ReturnTextNew =  tMinutes "minute"
	if tMinutes > 1 then
	  ReturnTextNew = ReturnTextNew || "s"
	if tSeconds > 0 then
	  ReturnTextNew = ReturnTextNew "and" ReturnText
	ReturnText = ReturnTextNew
      end -- if do
    if tHours > 0 then
      do
	ReturnTextNew = tHours "hour"
	if tHours > 1 then
	  ReturnTextNew = ReturnTextNew || "s"
	if tMinutes > 0 then do
	  if tSeconds > 0 then do
	    ReturnTextNew = ReturnTextNew || ","  ReturnText
	  end
	else do
	  ReturnTextNew = ReturnTextNew "and" ReturnText
	end
	end -- if tMinutes
	ReturnText = ReturnTextNew
      end -- if do
    if tDays > 0 then
      do
	ReturnTextNew = tDays "day"
	if tDays > 1 then
	  ReturnTextNew = ReturnTextNew || "s"
	if tHours > 0 | tMinutes > 0 | tSeconds > 0 then do
	  if tMinutes > 0 | tSeconds > 0 then do
	    ReturnTextNew = ReturnTextNew || "," ReturnText
	  end
	else do
	  ReturnTextNew = ReturnTextNew "and" ReturnText
	end
	end -- if tHours
	ReturnText = ReturnTextNew
      end -- if do
    if ReturnText = "" then
      ReturnText = tDelta "millisecs" ReturnText
    else
      ReturnText = tDelta "millisecs =" ReturnText

    return ReturnText


  method main(args=String[]) static
    d=Datum()

    say Datum.getDateStamp()
    d.cal.add(Calendar.DATE, 1 )
    say Datum.getDateStamp()
    e=Datum("21/12/98")
    say "Timestamp :"Datum.getTimestamp
    say Datum.getLogTimestamp
    say d.getDayOfWeekInMonth
    say "Is Weekend:" d.isWeekend
    say d.getDayOfWeekInMonthLocal
    say d.getDayOfWeekInThreeChars
    say d.getJulianDate
    say d.getJulianDateWithDot
    say d.getDateLocal
    say d.getDateLocalWithSlashesAndStarsInYearNotY2KCompatible()
    say "Previous:" d.getPreviousDay
    say "Next:" d.getNextDay
    say "Next:" d.getNextDay

    g=Datum(d.getPreviousDate)
    say "Gisteren/Yesterday " g.getDateLocalWithSlashes
    m=Datum(d.getNextDate)
    say "Morgen/Tomorrow" m.getDateLocalWithSlashes

    say "Netview 6000 log entry format: " d.getPreviousDayInNetview6000LogFormat()
    say "Apache web server log entry format: " d.getPreviousDayInApacheLogFormat()
    say "Unix file touch format: " d.getPreviousDayInTouchFormat()
    say "weeknummer/weeknumber" g.getWeekNumber()
    say "geinitialiseerde Datum/Initialized Date" e.getDateLocal()
    say "laatste dag van maand/lastdayofmonth:" d.getLastDayOfMonth()
    say "maand in locaal formaat/monthlocal:" d.getMonthLocal()
    say Datum.getTimeZoneShortID()