package com.rvjansen
import java.sql.
import java.util.
/**
 * Class DBAccess is a singleton that takes care of all queries to the DSD environment.
 */
class DBAccess
  properties private static
  jdbcCon  = Connection
  instance = DBAccess null
  
  /**
   * Method DBAccess (is private to enforce the singleton pattern)
   */
  method DBAccess() private protect
    
  /**
   * Method getInstance returns the (only) instance of this class when
   * it initialized, or constructs an instance when it is not
   */   
  method getInstance() returns DBAccess static protect
    if instance <> null then return instance
    instance = DBAccess()

    -- Class.forName("org.sqlite.JDBC")
    -- url_='jdbc:sqlite:dsd.sqb'

    -- url_ = 'jdbc:postgresql://localhost/rvjansen'
    -- Class.forName("org.postgresql.Driver")

    url_ = 'jdbc:duckdb:/Users/rvjansen/apps/flp/src/papiamento.db'
    Class.forName("org.duckdb.DuckDBDriver")

    do
      jdbcCon = Connection DriverManager.getConnection(url_)
    catch e = SQLException
      printException(e)
    end -- do

    return instance


  /**
   * Method getPredicatesAndWrite selects all current predicates
   * from the knowledge base (now > eff_dt and end_dt > now) 
   * @param fileName_ is a Rexx indicating the file to be written to
   */
  method getPredicatesAndWrite(fileName_) protect
    do
      dest=PrintWriter(FileWriter(fileName_))
    end
    do
      sqlstmt =  "select predicate, subject, object from predicate " -
		 "where now() > eff_dt and end_dt > now() " -
		 "order by 1" 
      
      stmt = Statement this.jdbcCon.createStatement()
      rs = ResultSet stmt.executeQuery(sqlstmt)
      
      loop while rs.next()
	do
	  predicate       = rs.getString(1)
	  subject	  = rs.getString(2)
	  object	  = rs.getString(3)
	catch NullPointerException
	  say 'Nullpointer in getPredicatesAndWrite()'
	end -- do
	line = predicate'('subject','object
	dest.println(line)
      end -- do
      
      rs.close()
      stmt.close()
      dest.close()
      return 0
    catch e = SQLException
      printException(e)
      return null
    end -- do

  /**
   * Method insertLine ...
   * @param subject_ is a Rexx
   * @param subject_ is a Rexx
   * @param object_ is a Rexx
   */
  method insertLine(istmt=PreparedStatement,predicate_,subject_,object_) protect
    do
      istmt.setString(1,predicate_.toString())
      istmt.setString(2,subject_.toString())
      istmt.setString(3,object_.toString())
      rows = istmt.executeUpdate()
      return 0
    catch e = SQLException
      printException(e)
      return null
    end -- do

  method prepareInsertStatement() protect returns PreparedStatement
    do
      insert_st =  "insert into predicate ( predicate, subject, object ) " -
		   "values (?,?,?)"
      
      istmt = PreparedStatement this.jdbcCon.prepareStatement(insert_st)
      return istmt
    catch e = SQLException
      printException(e)
      return null
    end -- do
 
  method closeInsertStatement(istmt=PreparedStatement) protect
    do
      istmt.close()
      return 0
    catch e = SQLException
      printException(e)
      return null
    end -- do
    
  /**
   * Method printException formats the SQL Exception it is given
   * @param e is an SQLException
   */
  method printException(e=SQLException) protect static
    say 'SQLException(s) caught !'
    loop while (e \= null)
      say 'SQLState:' e.getSQLState()
      say 'Message: ' e.getMessage()
      say 'Vendor:  ' e.getErrorCode()
      say
      e = e.getNextException()
    end
    
  /**
   * Method close closes the jdbc connection to the database
   */  
  method close() protect
    this.jdbcCon.close()
    
  /**
   * Method main is the entrypoint when this class is called by the jvm
   * @param args is a String[]
   */
  method main(args=String[]) static
    -- say 'dbaccess start'
    -- d=DBAccess.getInstance()
    -- d.getPredicatesAndWrite('test.pl')    
    -- say 'dbaccess end'